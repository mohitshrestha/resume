---
title: ""
author: ""
navbar: false

format: 
  html:
    theme: journal
    css: styles.css
editor: visual

knitr:
  opts_chunk: 
    echo: false
    message: false
    warning: false
---

```{r}
#| include: false
#| cache: false

googlesheets4::gs4_auth(path = "service-account.json", scopes = "https://www.googleapis.com/auth/spreadsheets")
googlesheets4::gs4_user()

cv_url <- "https://docs.google.com/spreadsheets/d/1nCw7ECSatsVa0cj-8g41b5qf3WX23PcSe3eWOXgkAuI/edit?usp=sharing"
cv <- googlesheets4::read_sheet(cv_url,
                                sheet = "entries",
                                skip = 1)
```

<!-- Functions -->

```{r}
# Function to handle column formatting: replaces "N/A|NA" values with empty strings
col_br <- function(col){
    dplyr::if_else(
        !is.na(col) & col != "N/A|NA", 
        paste0(col, ""),  # Return the column value if not "N/A|NA"
        ""  # Otherwise, return an empty string
    )
}

# Function to handle location formatting with an icon
col_br_location <- function(col){
    dplyr::if_else(
        !is.na(col) & col != "N/A|NA", 
        paste0('<br><i class="fa-solid fa-location-dot"></i> ', col),  # Add location icon if valid
        ""  # Return empty string if not a valid location
    )
}

# Function to create a section (e.g., work experience) in the CV
create_section <- function(cv_data, section_name){
    cv_data |>
        dplyr::mutate(
            # Ensure 'in_resume' is a character and fill missing 'end' dates with today's date
            in_resume = as.character(in_resume),
            end = tidyr::replace_na(end, (lubridate::ymd(Sys.Date()))),
            # Replace "Online" locations with NA
            location = dplyr::if_else(location == "Online", NA_character_, location)
        ) |>
        # Filter for rows where 'in_resume' is TRUE and the section matches
        dplyr::filter(in_resume %in% c("TRUE"), section == section_name) |>
        # Select relevant columns
        dplyr::select(section:description_5) |>
        # Sort by 'end' and 'start' dates in descending order
        dplyr::arrange(desc(end), desc(start)) |>
        dplyr::mutate(
            # Create a formatted date string based on the 'end' and 'start' dates
            date = dplyr::case_when(
                end == (lubridate::ymd(Sys.Date())) ~ glue::glue("Current <br> | <br> {format(start, '%b %Y')}"),
                end != start ~ glue::glue("{format(end, '%b %Y')} <br> | <br> {format(start, '%b %Y')}"),
                end == start ~ glue::glue("{format(end, '%b %Y')}"),
                TRUE ~ ""
            ),
            .before = everything()  # Place 'date' at the beginning of the dataframe
        ) |>
        # Create the main header for the project (combining title and institution)
        dplyr::mutate(
            main_header = dplyr::if_else(
                ({col_br(institution)} == ""),
                glue::glue("**{title}**"),
                glue::glue("**{title}** <br> *{col_br(institution)}*")
            ),
            .after = date # Place 'main_text' after 'date'
        ) |>
        # Create the main text for the CV section, combining title, institution, and descriptions
        dplyr::mutate(
            main_description = dplyr::if_else(
                ({col_br(description_1)} != "" & {col_br(description_2)} != "" & {col_br(description_3)} != "" & {col_br(description_4)} != "" & {col_br(description_5)} != ""), 
                glue::glue("<br> 
                            - {col_br(description_1)}
                            - {col_br(description_2)} 
                            - {col_br(description_3)} 
                            - {col_br(description_4)} 
                            - {col_br(description_5)}"),
                dplyr::if_else(
                    ({col_br(description_1)} != "" & {col_br(description_2)} != "" & {col_br(description_3)} != "" & {col_br(description_4)} != ""), 
                    glue::glue("<br> 
                                - {col_br(description_1)}
                                - {col_br(description_2)} 
                                - {col_br(description_3)}
                                - {col_br(description_4)}"),
                    dplyr::if_else(
                        ({col_br(description_1)} != "" & {col_br(description_2)} != "" & {col_br(description_3)} != ""), 
                        glue::glue("<br> 
                                    - {col_br(description_1)}
                                    - {col_br(description_2)} 
                                    - {col_br(description_3)}"),
                        dplyr::if_else(
                            ({col_br(description_1)} != "" & {col_br(description_2)} != ""), 
                            glue::glue("<br> 
                                        - {col_br(description_1)}
                                        - {col_br(description_2)}"),
                            glue::glue("<br> 
                                        - {col_br(description_1)}")
                        )
                    )
                )
            ),
            .after = date # Place 'main_text' after 'date'
        ) |>
        # Combine the header and description into 'main_text'
        dplyr::mutate(
            main_text = glue::glue("{main_header} {main_description}"),
            .after = date
        ) |>
        # Remove unnecessary columns
        dplyr::select(-c(start, end, section, title, institution, location, description_1, description_2, description_3, description_4, description_5, main_header, main_description)) |>
        # Create a GT table and apply markdown formatting
        gt::gt() |>
        gt::fmt_markdown(columns = c(date, main_text)) |>
        gt::tab_options(
            column_labels.hidden = TRUE, 
            table.width = gt::pct(100),
            table.border.top.style = "hidden",
            table.border.bottom.style = "hidden"
        ) |>
        gt::cols_align(align = "left", columns = main_text)  # Align the main text to the left
}

# Function to create an education section in the CV
create_education_section <- function(cv_data, section_name){
    cv_data |>
        dplyr::mutate(
            # Ensure 'in_resume' is a character and fill missing 'end' dates with today's date
            in_resume = as.character(in_resume),
            end = tidyr::replace_na(end, (lubridate::ymd(Sys.Date()))),
            # Replace "Online" locations with NA
            location = dplyr::if_else(location == "Online", NA_character_, location)
        ) |>
        # Filter for rows where 'in_resume' is TRUE and the section matches
        dplyr::filter(in_resume %in% c("TRUE"), section == section_name) |>
        # Select relevant columns
        dplyr::select(section:description_5) |>
        # Sort by 'end' and 'start' dates in descending order
        dplyr::arrange(desc(end), desc(start)) |>
        dplyr::mutate(
            # Create a formatted date string based on the 'end' and 'start' dates
            date = dplyr::case_when(
                end == (lubridate::ymd(Sys.Date())) ~ glue::glue("Current <br> | <br> {format(start, '%b %Y')}"),
                end != start ~ glue::glue("{format(end, '%b %Y')} <br> | <br> {format(start, '%b %Y')}"),
                end == start ~ glue::glue("{format(end, '%b %Y')}"),
                TRUE ~ ""
            ),
            .before = everything()  # Place 'date' at the beginning of the dataframe
        ) |>
        # Create the main text for the CV section, combining title, institution, and description
        dplyr::mutate(
            main_text = glue::glue(
                "**{title}** <br> *{col_br(institution)}* {col_br_location(location)} <br> {col_br(description_1)}"
            ),
            .after = date  # Place 'main_text' after 'date'
        ) |>
        # Remove unnecessary columns
        dplyr::select(-c(start, end, section, title, institution, location, description_1, description_2, description_3, description_4, description_5)) |>
        # Create a GT table and apply markdown formatting
        gt::gt() |>
        gt::fmt_markdown(columns = c(date, main_text)) |>
        gt::tab_options(
            column_labels.hidden = TRUE, 
            table.width = gt::pct(100), 
            table.border.top.style = "hidden",
            table.border.bottom.style = "hidden"
        ) |>
        gt::cols_align(align = "left", columns = main_text)  # Align the main text to the left
}

# Function to create a projects section in the CV
create_projects_section <- function(cv_data, section_name) {
    cv_data |>
        dplyr::mutate(
            # Ensure 'in_resume' is a character and fill missing 'end' dates with today's date
            in_resume = as.character(in_resume),
            end = tidyr::replace_na(end, (lubridate::ymd(Sys.Date()))),
            # Replace "Online" locations with NA
            location = dplyr::if_else(location == "Online", NA_character_, location)
        ) |>
        # Filter for rows where 'in_resume' is TRUE and the section matches
        dplyr::filter(in_resume %in% c("TRUE"), section == section_name) |>
        # Select relevant columns
        dplyr::select(section:description_5) |>
        # Sort by 'end' and 'start' dates in descending order
        dplyr::arrange(desc(end), desc(start)) |>
        dplyr::mutate(
            # Create a formatted date string based on the 'end' and 'start' dates
            date = dplyr::case_when(
                end == (lubridate::ymd(Sys.Date())) ~ glue::glue("Current <br> | <br> {format(start, '%b %Y')}"),
                end != start ~ glue::glue("{format(end, '%b %Y')} <br> | <br> {format(start, '%b %Y')}"),
                end == start ~ glue::glue("{format(end, '%b %Y')}"),
                TRUE ~ ""
            ),
            .before = everything()  # Place 'date' at the beginning of the dataframe
        ) |>
        # Create the main header for the project (combining title and institution)
        dplyr::mutate(
            main_header = dplyr::if_else(
                ({col_br(institution)} == ""),
                glue::glue("**{title}**"),
                glue::glue("**{title}** <br> *{col_br(institution)}*")
            ),
            .after = date
        ) |>
        # Create the main description of the project
        dplyr::mutate(
            main_description = dplyr::if_else(
                ({col_br(description_1)} != "" & {col_br(description_2)} != "" & {col_br(description_3)} != "" & {col_br(description_4)} != "" & {col_br(description_5)} != ""), 
                glue::glue("<br> 
                            - {col_br(description_1)}
                            - {col_br(description_2)} 
                            - {col_br(description_3)} 
                            - {col_br(description_4)} 
                            - {col_br(description_5)}"),
                dplyr::if_else(
                    ({col_br(description_1)} != "" & {col_br(description_2)} != "" & {col_br(description_3)} != "" & {col_br(description_4)} != ""), 
                    glue::glue("<br> 
                                - {col_br(description_1)}
                                - {col_br(description_2)} 
                                - {col_br(description_3)}
                                - {col_br(description_4)}"),
                    dplyr::if_else(
                        ({col_br(description_1)} != "" & {col_br(description_2)} != "" & {col_br(description_3)} != ""), 
                        glue::glue("<br> 
                                    - {col_br(description_1)}
                                    - {col_br(description_2)} 
                                    - {col_br(description_3)}"),
                        dplyr::if_else(
                            ({col_br(description_1)} != "" & {col_br(description_2)} != ""), 
                            glue::glue("<br> 
                                        - {col_br(description_1)}
                                        - {col_br(description_2)}"),
                            glue::glue("<br> 
                                        - {col_br(description_1)}")
                        )
                    )
                )
            ),
            .after = date # Place 'main_text' after 'date'
        ) |>
        # Combine the header and description into 'main_text'
        dplyr::mutate(
            main_text = glue::glue("{main_header} {main_description}"),
            .after = date
        ) |>
        # Remove unnecessary columns
        dplyr::select(-c(start, end, date, section, title, institution, location, description_1, description_2, description_3, description_4, description_5, main_header, main_description)) |>
        # Create a GT table and apply markdown formatting
        gt::gt() |>
        gt::fmt_markdown(columns = c(main_text)) |>
        gt::tab_options(
            column_labels.hidden = TRUE, 
            table.width = gt::pct(100),
            table.border.top.style = "hidden",
            table.border.bottom.style = "hidden"
        ) |>
        gt::cols_align(align = "left", columns = main_text)  # Align the main text to the left
}
```

<!-- Sidebar -->

::::: {#name .grid}
::: g-col-4
<center><a href='https://mohitshrestha.com.np' target='_blank'> ![](https://avatars.githubusercontent.com/u/47285145?v=4){width="80%" style="border-radius: 50%;"}</center>

</a>

### <i class="fa-solid fa-address-card"></i> Contact

<center><span style="font-size: 1.5em;"> <a href='https://mohitshrestha.com.np' target='_blank'><i class="fa fa-home"></i></a> <a href='https://github.com/MohitShrestha' target='_blank'><i class="fa-brands fa-github"></i></a> <a href='mailto:mohitshrestha@gmail.com'><i class="fa fa-envelope"></i></a> <a href='tel:+14438234701'><i class="fa-solid fa-phone"></i></a> <a href='https://twitter.com/MohitShrestha' target='_blank'><i class="fa-brands fa-twitter"></i></a> <a href='https://linkedin.com/in/MohitShrestha' target='_blank'><i class="fab fa-linkedin"></i></a></center>

</span>

I am motivated to support organizations striving to be more data-driven in their missions and solve problems by converting insights from data into actionable solutions.

### <i class="fa-solid fa-laptop-code"></i> Programming skills

<i class="fab fa-r-project"></i> `R` / <i class="fa-brands fa-python"></i> `Python` <br> <i class="fa fa-area-chart" aria-hidden="true"></i> `tidyverse` <br> <i class="fab fa-markdown"></i> `RMarkdown / Quarto` <br> <i class="fas fa-code-branch"></i> `Git` / <i class="fab fa-github"></i> `GitHub` <br> <i class="fab fa-markdown"></i> `Markdown` <br> <i class="fab fa-html5"></i> `HTML` / <i class="fab fa-css3-alt"></i> `CSS` <br>

### <i class="fa-solid fa-person-chalkboard"></i> Teaching

**Graduate Peer Tutor**\
[*Wake Forest University School of Business*](https://business.wfu.edu/msbaprograms/)

Conducted one-on-one remote tutoring sessions for new cohort of MSBA students on the fundamentals of coding in SAS and R for Analytics Software Technology course

### <i class="fa-brands fa-dev"></i> Software

<i class="fas fa-box-open"></i> [Package {automaton}](https://mohitshrestha.github.io/automaton/) - Author.

### <i class="fa-solid fa-award"></i> Honors and Awards

<i class="far fa-star"></i> Patrick Henry Merit Scholarship <i class="far fa-star"></i> Phi Beta Kappa <i class="far fa-star"></i> Wall Street Journal Student Achievement Award <i class="far fa-star"></i> Pi Mu Epsilon <i class="far fa-star"></i> Omicron Delta Kappa <i class="far fa-star"></i> Chi Beta Phi <i class="far fa-star"></i> Omicron Delta Epsilon

### <i class="fa-solid fa-language"></i> Languages

**English:** Fluent <br> **Nepali:** Native <br> **Hindi:** Intermediate
:::

::: g-col-8
<!-- Main content -->

# Mohit Shrestha

I am well versed in R, Python, SAS, SQL, Tableau, and Power BI and specializes in data modeling and wrangling, building ML/AI models, analyzing and interpreting model results, and presenting impactful data insights to drive successful business solutions.

## <i class="fa-solid fa-suitcase"></i> Work Experiences

```{r}
create_section(cv, "industry_positions")
```

## <i class="fa-solid fa-graduation-cap"></i> Education

```{r}
create_education_section(cv, "education")
```
:::
:::::

## <i class="fa-solid fa-chalkboard-user"></i> Selected Academic Research and Data Analytics projects

```{r}
create_projects_section(cv, "relevant_academic_research_and_data_analytics_projects")
```

<!-- footer -->

<p class="footer">

Resume made with 💜 and [Quarto](https://quarto.org/). Last updated on `r format.Date(Sys.Date(), "%b %d, %Y")`. <br> Code available on <i class="fa-brands fa-github"></i> [GitHub](https://github.com/mohitshrestha/resume/blob/master/docs/index.qmd). <br>License: [CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/).

</p>

```{=html}
<script src="https://kit.fontawesome.com/1bb720cc6f.js" crossorigin="anonymous"></script>
```
